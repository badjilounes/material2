{"version":3,"file":"grid-tile.js","sourceRoot":"","sources":["grid-tile.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCASuB;AACvB,gCAA+C;AAC/C,yDAAmD;AASnD,IAAa,UAAU;IAIrB,oBAAoB,SAAmB,EAAU,QAAoB;QAAjD,cAAS,GAAT,SAAS,CAAU;QAAU,aAAQ,GAAR,QAAQ,CAAY;QAHrE,aAAQ,GAAW,CAAC,CAAC;QACrB,aAAQ,GAAW,CAAC,CAAC;IAEmD,CAAC;IAGzE,sBAAI,+BAAO;aAAX;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;aAOD,UAAY,KAAK;YACf,IAAI,CAAC,QAAQ,GAAG,kCAAc,CAAC,KAAK,CAAC,CAAC;QACxC,CAAC;;;OATA;IAGD,sBAAI,+BAAO;aAAX;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;aAMD,UAAY,KAAK;YACf,IAAI,CAAC,QAAQ,GAAG,kCAAc,CAAC,KAAK,CAAC,CAAC;QACxC,CAAC;;;OARA;IAUD;;;OAGG;IACH,8BAAS,GAAT,UAAU,QAAgB,EAAE,KAAa;QACvC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC/E,CAAC;IAEH,iBAAC;AAAD,CAAC,AAhCD,IAgCC;AAzBC;IADC,YAAK,EAAE;;;yCAGP;AAGD;IADC,YAAK,EAAE;;;yCAGP;AAdU,UAAU;IAPtB,gBAAS,CAAC;QACT,QAAQ,EAAE,6BAA6B;QACvC,IAAI,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE;QAC5B,QAAQ,EAAE,OAAO,CAAC,kBAAkB,CAAC;QACrC,MAAM,EAAE,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC/C,aAAa,EAAE,wBAAiB,CAAC,IAAI;KACtC,CAAC;qCAK+B,eAAQ,EAAoB,iBAAU;GAJ1D,UAAU,CAgCtB;AAhCY,gCAAU;AAsCvB,IAAa,cAAc;IAQzB,wBAAoB,SAAmB,EAAU,QAAoB;QAAjD,cAAS,GAAT,SAAS,CAAU;QAAU,aAAQ,GAAR,QAAQ,CAAY;IAAG,CAAC;IAEzE,2CAAkB,GAAlB;QACE,IAAI,CAAC,WAAW,GAAG,IAAI,mBAAY,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClF,CAAC;IACH,qBAAC;AAAD,CAAC,AAbD,IAaC;AAP0B;IAAxB,sBAAe,CAAC,aAAM,CAAC;8BAAS,gBAAS;8CAAS;AANxC,cAAc;IAJ1B,gBAAS,CAAC;QACT,QAAQ,EAAE,sFAAsF;QAChG,QAAQ,EAAE,OAAO,CAAC,uBAAuB,CAAC;KAC3C,CAAC;qCAS+B,eAAQ,EAAoB,iBAAU;GAR1D,cAAc,CAa1B;AAbY,wCAAc","sourcesContent":["import {\n  Component,\n  ViewEncapsulation,\n  Renderer,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit\n} from '@angular/core';\nimport { MdLine, MdLineSetter } from '../core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  selector: 'md-grid-tile, mat-grid-tile',\n  host: { 'role': 'listitem' },\n  template: require('./grid-tile.html'),\n  styles: [require('./grid-list.css').toString()],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MdGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _renderer: Renderer, private _element: ElementRef) {}\n\n  @Input()\n  get rowspan() {\n    return this._rowspan;\n  }\n\n  @Input()\n  get colspan() {\n    return this._colspan;\n  }\n\n  set rowspan(value) {\n    this._rowspan = coerceToNumber(value);\n  }\n\n  set colspan(value) {\n    this._colspan = coerceToNumber(value);\n  }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: string): void {\n    this._renderer.setElementStyle(this._element.nativeElement, property, value);\n  }\n\n}\n\n@Component({\n  selector: 'md-grid-tile-header, mat-grid-tile-header, md-grid-tile-footer, mat-grid-tile-footer',\n  template: require('./grid-tile-text.html')\n})\nexport class MdGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MdLineSetter;\n  @ContentChildren(MdLine) _lines: QueryList<MdLine>;\n\n  constructor(private _renderer: Renderer, private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MdLineSetter(this._lines, this._renderer, this._element);\n  }\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}