{"version":3,"file":"button-toggle.js","sourceRoot":"","sources":["button-toggle.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    NgModule,\n    ModuleWithProviders,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    Renderer,\n    EventEmitter,\n    HostBinding,\n    Input,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    forwardRef,\n    AfterViewInit\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor, FormsModule} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\nimport {\n  MdUniqueSelectionDispatcher,\n  coerceBooleanProperty,\n  DefaultStyleCompatibilityModeModule,\n} from '../core';\n\n\nexport type ToggleType = 'checkbox' | 'radio';\n\n\n\n/**\n * Provider Expression that allows md-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n */\nexport const MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MdButtonToggleGroup),\n  multi: true\n};\n\nvar _uniqueIdCounter = 0;\n\n/** A simple change event emitted by either MdButtonToggle or MdButtonToggleGroup. */\nexport class MdButtonToggleChange {\n  source: MdButtonToggle;\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'md-button-toggle-group:not([multiple])',\n  providers: [MD_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    '[class.md-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'mdButtonToggleGroup',\n})\nexport class MdButtonToggleGroup implements AfterViewInit, ControlValueAccessor {\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `md-radio-group-${_uniqueIdCounter++}`;\n\n  /** Disables all toggles in the group. */\n  private _disabled: boolean = null;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MdButtonToggle = null;\n\n  /** Whether the button toggle group is initialized or not. */\n  private _isInitialized: boolean = false;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  private _controlValueAccessorChangeFn: (value: any) => void = (value) => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** Event emitted when the group's value changes. */\n  private _change: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n  @Output() get change(): Observable<MdButtonToggleChange> {\n    return this._change.asObservable();\n  }\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MdButtonToggle))\n  _buttonToggles: QueryList<MdButtonToggle> = null;\n\n  /** TODO: internal */\n  ngAfterViewInit() {\n    this._isInitialized = true;\n  }\n\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n\n      // Only emit a change event if the view is completely initialized.\n      // We don't want to emit a change event for the initial values.\n      if (this._isInitialized) {\n        this._emitChangeEvent();\n      }\n    }\n  }\n\n  @Input()\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(selected: MdButtonToggle) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  private _emitChangeEvent(): void {\n    let event = new MdButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this._change.emit(event);\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * TODO: internal\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * TODO: internal\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   * TODO: internal\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'md-button-toggle-group[multiple]',\n  exportAs: 'mdButtonToggleGroup',\n  host: {\n    '[class.md-button-toggle-vertical]': 'vertical'\n  }\n})\nexport class MdButtonToggleGroupMultiple {\n  /** Disables all toggles in the group. */\n  private _disabled: boolean = null;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n}\n\n@Component({\n  selector: 'md-button-toggle',\n  template: require('./button-toggle.html'),\n  styles: [require('./button-toggle.css').toString()],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MdButtonToggle implements OnInit {\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** The unique ID for this button toggle. */\n  @HostBinding()\n  @Input()\n  id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input()\n  name: string;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = null;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = null;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MdButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MdButtonToggleGroupMultiple;\n\n  /** Event emitted when the group value changes. */\n  private _change: EventEmitter<MdButtonToggleChange> = new EventEmitter<MdButtonToggleChange>();\n  @Output() get change(): Observable<MdButtonToggleChange> {\n    return this._change.asObservable();\n  }\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() toggleGroup: MdButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MdButtonToggleGroupMultiple,\n              public buttonToggleDispatcher: MdUniqueSelectionDispatcher,\n              private _renderer: Renderer) {\n    this.buttonToggleGroup = toggleGroup;\n\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      buttonToggleDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `md-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n  }\n\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  @HostBinding('class.md-button-toggle-checked')\n  @Input()\n  get checked(): boolean {\n    return this._checked;\n  }\n\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector) {\n      if (newCheckedState) {\n        // Notify all button toggles with the same name (in the same group) to un-check.\n        this.buttonToggleDispatcher.notify(this.id, this.name);\n      }\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MdButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MdButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this._change.emit(event);\n  }\n\n  @HostBinding('class.md-button-toggle-disabled')\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = (value != null && value !== false) ? true : null;\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  /** TODO: internal */\n  _onInputClick(event: Event) {\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  focus() {\n    this._renderer.invokeElementMethod(this._inputElement.nativeElement, 'focus');\n  }\n}\n\n\n@NgModule({\n  imports: [FormsModule, DefaultStyleCompatibilityModeModule],\n  exports: [\n    MdButtonToggleGroup,\n    MdButtonToggleGroupMultiple,\n    MdButtonToggle,\n    DefaultStyleCompatibilityModeModule,\n  ],\n  declarations: [MdButtonToggleGroup, MdButtonToggleGroupMultiple, MdButtonToggle],\n})\nexport class MdButtonToggleModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdButtonToggleModule,\n      providers: [MdUniqueSelectionDispatcher]\n    };\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}