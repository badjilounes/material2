{"version":3,"file":"tab-label-wrapper.js","sourceRoot":"","sources":["tab-label-wrapper.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAAqE;AACrE,sEAAwE;AAGxE,4DAA4D;AAO5D,IAAa,iBAAiB;IAC5B,2BAAmB,UAAsB,EAAU,SAAmB;QAAnD,eAAU,GAAV,UAAU,CAAY;QAAU,cAAS,GAAT,SAAS,CAAU;QAEtE,0CAA0C;QAClC,cAAS,GAAY,KAAK,CAAC;IAHsC,CAAC;IAM1E,sBAAI,uCAAQ;aAAZ,cAAiB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aACzC,UAAa,KAAU,IAAI,IAAI,CAAC,SAAS,GAAG,wCAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OADlC;IAGzC,wCAAwC;IACxC,iCAAK,GAAL;QACE,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;IAC7E,CAAC;IAED,yCAAa,GAAb;QACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,CAAC;IAClD,CAAC;IAED,0CAAc,GAAd;QACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,WAAW,CAAC;IACnD,CAAC;IACH,wBAAC;AAAD,CAAC,AAtBD,IAsBC;AAfC;IADC,YAAK,EAAE;;;iDACiC;AAP9B,iBAAiB;IAN7B,gBAAS,CAAC;QACT,QAAQ,EAAE,iDAAiD;QAC3D,IAAI,EAAE;YACJ,yBAAyB,EAAE,UAAU;SACtC;KACF,CAAC;qCAE+B,iBAAU,EAAqB,eAAQ;GAD3D,iBAAiB,CAsB7B;AAtBY,8CAAiB","sourcesContent":["import {Directive, ElementRef, Renderer, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '../core/coersion/boolean-property';\n\n\n/** Used in the `md-tab-group` view to display tab labels */\n@Directive({\n  selector: '[md-tab-label-wrapper], [mat-tab-label-wrapper]',\n  host: {\n    '[class.md-tab-disabled]': 'disabled'\n  }\n})\nexport class MdTabLabelWrapper {\n  constructor(public elementRef: ElementRef, private _renderer: Renderer) {}\n\n  /** Whether the tab label is disabled.  */\n  private _disabled: boolean = false;\n\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this._renderer.invokeElementMethod(this.elementRef.nativeElement, 'focus');\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}