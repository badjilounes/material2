{"version":3,"file":"tab.js","sourceRoot":"","sources":["tab.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,gDAAqD;AACrD,sCAGuB;AACvB,sEAAwE;AAExE,yCAAuC;AAOvC,IAAa,KAAK;IA8BhB,eAAoB,iBAAmC;QAAnC,sBAAiB,GAAjB,iBAAiB,CAAkB;QAvBvD,8EAA8E;QAC9D,cAAS,GAAW,EAAE,CAAC;QAEvC,4DAA4D;QACpD,mBAAc,GAAmB,IAAI,CAAC;QAG9C;;;WAGG;QACH,aAAQ,GAAW,IAAI,CAAC;QAExB;;;WAGG;QACH,WAAM,GAAW,IAAI,CAAC;QAEd,cAAS,GAAG,KAAK,CAAC;IAIiC,CAAC;IAlB5D,sBAAI,0BAAO;aAAX,cAAgC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;;;OAAA;IAepD,sBAAI,2BAAQ;aACrB,cAA0B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;aADzC,UAAa,KAAc,IAAI,IAAI,CAAC,SAAS,GAAG,wCAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAKxF,wBAAQ,GAAR;QACE,IAAI,CAAC,cAAc,GAAG,IAAI,uBAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAClF,CAAC;IACH,YAAC;AAAD,CAAC,AAnCD,IAmCC;AAjC2B;IAAzB,mBAAY,CAAC,sBAAU,CAAC;8BAAgB,sBAAU;4CAAC;AAG5B;IAAvB,gBAAS,CAAC,kBAAW,CAAC;8BAAW,kBAAW;uCAAM;AAGnC;IAAf,YAAK,CAAC,OAAO,CAAC;;wCAAwB;AAmB9B;IAAR,YAAK,EAAE;;;qCAAgF;AA3B7E,KAAK;IALjB,gBAAS,CAAC;QACT,QAAQ,EAAE,MAAM,CAAC,EAAE;QACnB,QAAQ,EAAE,QAAQ;QAClB,WAAW,EAAE,UAAU;KACxB,CAAC;qCA+BuC,uBAAgB;GA9B5C,KAAK,CAmCjB;AAnCY,sBAAK","sourcesContent":["import {TemplatePortal} from '../core/portal/portal';\nimport {\n  ViewContainerRef, Input, TemplateRef, ViewChild, OnInit, ContentChild,\n  Component\n} from '@angular/core';\nimport {coerceBooleanProperty} from '../core/coersion/boolean-property';\n\nimport {MdTabLabel} from './tab-label';\n\n@Component({\n  moduleId: module.id,\n  selector: 'md-tab',\n  templateUrl: 'tab.html',\n})\nexport class MdTab implements OnInit {\n  /** Content for the tab label given by <template md-tab-label>. */\n  @ContentChild(MdTabLabel) templateLabel: MdTabLabel;\n\n  /** Template inside the MdTab view that contains an <ng-content>. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal = null;\n  get content(): TemplatePortal { return this._contentPortal; }\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number = null;\n\n  private _disabled = false;\n  @Input() set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  get disabled(): boolean { return this._disabled; }\n\n  constructor(private _viewContainerRef: ViewContainerRef) { }\n\n  ngOnInit() {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}