{"version":3,"file":"viewport-ruler.js","sourceRoot":"","sources":["viewport-ruler.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAAyC;AAIzC;;;GAGG;AAEH,IAAa,aAAa;IAA1B;IAgDA,CAAC;IA/CC,wFAAwF;IACxF,0BAA0B;IAG1B,mDAAmD;IACnD,uCAAe,GAAf;QACE,oFAAoF;QACpF,mFAAmF;QACnF,2FAA2F;QAC3F,0FAA0F;QAC1F,8EAA8E;QAC9E,sEAAsE;QACtE,2FAA2F;QAC3F,oFAAoF;QACpF,2BAA2B;QAC3B,IAAM,YAAY,GAAG,QAAQ,CAAC,eAAe,CAAC,qBAAqB,EAAE,CAAC;QACtE,IAAM,cAAc,GAAG,IAAI,CAAC,yBAAyB,CAAC,YAAY,CAAC,CAAC;QACpE,IAAM,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC;QAClC,IAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC;QAEhC,MAAM,CAAC;YACL,GAAG,EAAE,cAAc,CAAC,GAAG;YACvB,IAAI,EAAE,cAAc,CAAC,IAAI;YACzB,MAAM,EAAE,cAAc,CAAC,GAAG,GAAG,MAAM;YACnC,KAAK,EAAE,cAAc,CAAC,IAAI,GAAG,KAAK;YAClC,MAAM,QAAA;YACN,KAAK,OAAA;SACN,CAAC;IACJ,CAAC;IAGD;;;OAGG;IACH,iDAAyB,GAAzB,UAA0B,YAA+D;QAA/D,6BAAA,EAAA,eAAe,QAAQ,CAAC,eAAe,CAAC,qBAAqB,EAAE;QACvF,2FAA2F;QAC3F,0FAA0F;QAC1F,4FAA4F;QAC5F,oFAAoF;QACpF,wFAAwF;QACxF,sCAAsC;QACtC,IAAM,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,OAAO,IAAI,CAAC,CAAC;QAChF,IAAM,IAAI,GAAG,CAAC,YAAY,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU,IAAI,MAAM,CAAC,OAAO,IAAI,CAAC,CAAC;QAEnF,MAAM,CAAC,EAAC,GAAG,KAAA,EAAE,IAAI,MAAA,EAAC,CAAC;IACrB,CAAC;IACH,oBAAC;AAAD,CAAC,AAhDD,IAgDC;AAhDY,aAAa;IADzB,iBAAU,EAAE;GACA,aAAa,CAgDzB;AAhDY,sCAAa","sourcesContent":["import {Injectable} from '@angular/core';\n\n\n\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * TODO: internal\n */\n@Injectable()\nexport class ViewportRuler {\n  // TODO(jelbourn): cache the document's bounding rect and only update it when the window\n  // is resized (debounced).\n\n\n  /** Gets a ClientRect for the viewport's bounds. */\n  getViewportRect(): ClientRect {\n    // Use the document element's bounding rect rather than the window scroll properties\n    // (e.g. pageYOffset, scrollY) due to in issue in Chrome and IE where window scroll\n    // properties and client coordinates (boundingClientRect, clientX/Y, etc.) are in different\n    // conceptual viewports. Under most circumstances these viewports are equivalent, but they\n    // can disagree when the page is pinch-zoomed (on devices that support touch).\n    // See https://bugs.chromium.org/p/chromium/issues/detail?id=489206#c4\n    // We use the documentElement instead of the body because, by default (without a css reset)\n    // browsers typically give the document body an 8px margin, which is not included in\n    // getBoundingClientRect().\n    const documentRect = document.documentElement.getBoundingClientRect();\n    const scrollPosition = this.getViewportScrollPosition(documentRect);\n    const height = window.innerHeight;\n    const width = window.innerWidth;\n\n    return {\n      top: scrollPosition.top,\n      left: scrollPosition.left,\n      bottom: scrollPosition.top + height,\n      right: scrollPosition.left + width,\n      height,\n      width,\n    };\n  }\n\n\n  /**\n   * Gets the (top, left) scroll position of the viewport.\n   * @param documentRect\n   */\n  getViewportScrollPosition(documentRect = document.documentElement.getBoundingClientRect()) {\n    // The top-left-corner of the viewport is determined by the scroll position of the document\n    // body, normally just (scrollLeft, scrollTop). However, Chrome and Firefox disagree about\n    // whether `document.body` or `document.documentElement` is the scrolled element, so reading\n    // `scrollTop` and `scrollLeft` is inconsistent. However, using the bounding rect of\n    // `document.documentElement` works consistently, where the `top` and `left` values will\n    // equal negative the scroll position.\n    const top = -documentRect.top || document.body.scrollTop || window.scrollY || 0;\n    const left = -documentRect.left || document.body.scrollLeft || window.scrollX || 0;\n\n    return {top, left};\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}