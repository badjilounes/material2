{"version":3,"file":"dir.js","sourceRoot":"","sources":["dir.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAQuB;AAIvB;;;;;GAKG;AAMH,IAAa,GAAG;IALhB;QAMgB,SAAI,GAAoB,KAAK,CAAC;QAElC,cAAS,GAAG,IAAI,mBAAY,EAAQ,CAAC;IAgBjD,CAAC;IAbC,sBAAI,oBAAG;aAAP;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;aACD,UAAQ,CAAkB;YACxB,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;YACpB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;YACd,EAAE,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;YACxB,CAAC;QACH,CAAC;;;OAPA;IASD,sBAAI,sBAAK;aAAT,cAA+B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;aACjD,UAAU,CAAkB,IAAI,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;;;OADE;IAEnD,UAAC;AAAD,CAAC,AAnBD,IAmBC;AAlBe;IAAb,YAAK,CAAC,KAAK,CAAC;;iCAA+B;AAElC;IAAT,aAAM,EAAE;;sCAAsC;AAG/C;IADC,kBAAW,CAAC,UAAU,CAAC;;;8BAGvB;AARU,GAAG;IALf,gBAAS,CAAC;QACT,QAAQ,EAAE,OAAO;QACjB,iGAAiG;QACjG,QAAQ,EAAE,WAAW;KACtB,CAAC;GACW,GAAG,CAmBf;AAnBY,kBAAG;AA0BhB,IAAa,SAAS;IAAtB;IAOA,CAAC;IANQ,iBAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,WAAS;YACnB,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IACH,gBAAC;AAAD,CAAC,AAPD,IAOC;AAPY,SAAS;IAJrB,eAAQ,CAAC;QACR,OAAO,EAAE,CAAC,GAAG,CAAC;QACd,YAAY,EAAE,CAAC,GAAG,CAAC;KACpB,CAAC;GACW,SAAS,CAOrB;AAPY,8BAAS","sourcesContent":["import {\n  NgModule,\n  ModuleWithProviders,\n  Directive,\n  HostBinding,\n  Output,\n  Input,\n  EventEmitter\n} from '@angular/core';\n\nexport type LayoutDirection = 'ltr' | 'rtl';\n\n/**\n * Directive to listen to changes of direction of part of the DOM.\n *\n * Applications should use this directive instead of the native attribute so that Material\n * components can listen on changes of direction.\n */\n@Directive({\n  selector: '[dir]',\n  // TODO(hansl): maybe `$implicit` isn't the best option here, but for now that's the best we got.\n  exportAs: '$implicit'\n})\nexport class Dir {\n  @Input('dir') _dir: LayoutDirection = 'ltr';\n\n  @Output() dirChange = new EventEmitter<void>();\n\n  @HostBinding('attr.dir')\n  get dir(): LayoutDirection {\n    return this._dir;\n  }\n  set dir(v: LayoutDirection) {\n    let old = this._dir;\n    this._dir = v;\n    if (old != this._dir) {\n      this.dirChange.emit();\n    }\n  }\n\n  get value(): LayoutDirection { return this.dir; }\n  set value(v: LayoutDirection) { this.dir = v; }\n}\n\n\n@NgModule({\n  exports: [Dir],\n  declarations: [Dir]\n})\nexport class RtlModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: RtlModule,\n      providers: []\n    };\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}