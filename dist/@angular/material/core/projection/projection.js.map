{"version":3,"file":"projection.js","sourceRoot":"","sources":["projection.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA+F;AAG/F,uCAAuC;AACvC,6EAA6E;AAC7E,sBAAsB,WAAwB,EAAE,OAAoB;IAClE,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;AAC/D,CAAC;AAMD,IAAa,iBAAiB;IAC5B,2BAAmB,GAAe;QAAf,QAAG,GAAH,GAAG,CAAY;IAAG,CAAC;IACxC,wBAAC;AAAD,CAAC,AAFD,IAEC;AAFY,iBAAiB;IAH7B,gBAAS,CAAC;QACT,QAAQ,EAAE,qBAAqB;KAChC,CAAC;qCAEwB,iBAAU;GADvB,iBAAiB,CAE7B;AAFY,8CAAiB;AAM9B,IAAa,aAAa;IAA1B;IAqDA,CAAC;IApDC;;;;;;;;;;;;;;;;;;;;;;;;;;;OA2BG;IACH,+BAAO,GAAP,UAAQ,GAAe,EAAE,IAAuB;QAC9C,IAAM,WAAW,GAAG,GAAG,CAAC,aAAa,CAAC;QACtC,IAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC;QACtC,IAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC;QAC1C,IAAI,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;QAE1B,4FAA4F;QAC5F,6EAA6E;QAC7E,YAAY,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QACjC,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC;QAC1B,OAAO,CAAC,EAAE,EAAE,CAAC;YACX,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;YAChE,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,CAAE,wCAAwC;QACtE,CAAC;QAED,kFAAkF;QAClF,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;QAC7B,OAAO,CAAC,EAAE,EAAE,CAAC;YACX,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,CAAC;QACD,YAAY,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAElC,gFAAgF;IAClF,CAAC;IACH,oBAAC;AAAD,CAAC,AArDD,IAqDC;AArDY,aAAa;IADzB,iBAAU,EAAE;GACA,aAAa,CAqDzB;AArDY,sCAAa;AA4D1B,IAAa,gBAAgB;IAA7B;IAOA,CAAC;IANQ,wBAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,kBAAgB;YAC1B,SAAS,EAAE,CAAC,aAAa,CAAC;SAC3B,CAAC;IACJ,CAAC;IACH,uBAAC;AAAD,CAAC,AAPD,IAOC;AAPY,gBAAgB;IAJ5B,eAAQ,CAAC;QACR,OAAO,EAAE,CAAC,iBAAiB,CAAC;QAC5B,YAAY,EAAE,CAAC,iBAAiB,CAAC;KAClC,CAAC;GACW,gBAAgB,CAO5B;AAPY,4CAAgB","sourcesContent":["import {Injectable, Directive, ModuleWithProviders, NgModule, ElementRef} from '@angular/core';\n\n\n// \"Polyfill\" for `Node.replaceWith()`.\n// cf. https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith\nfunction _replaceWith(toReplaceEl: HTMLElement, otherEl: HTMLElement) {\n  toReplaceEl.parentElement.replaceChild(otherEl, toReplaceEl);\n}\n\n\n@Directive({\n  selector: 'dom-projection-host'\n})\nexport class DomProjectionHost {\n  constructor(public ref: ElementRef) {}\n}\n\n\n@Injectable()\nexport class DomProjection {\n  /**\n   * Project an element into a host element.\n   * Replace a host element by another element. This also replaces the children of the element\n   * by the children of the host.\n   *\n   * It should be used like this:\n   *\n   * ```\n   *   @Component({\n   *     template: `<div>\n   *       <dom-projection-host>\n   *         <div>other</div>\n   *         <ng-content></ng-content>\n   *       </dom-projection-host>\n   *     </div>`\n   *   })\n   *   class Cmpt {\n   *     constructor(private _projector: DomProjection, private _el: ElementRef) {}\n   *     ngOnInit() { this._projector.project(this._el, this._projector); }\n   *   }\n   * ```\n   *\n   * This component will move the content of the element it's applied to in the outer div. Because\n   * `project()` also move the children of the host inside the projected element, the element will\n   * contain the `<div>other</div>` HTML as well as its own children.\n   *\n   * Note: without `<ng-content></ng-content>` the projection will project an empty element.\n   */\n  project(ref: ElementRef, host: DomProjectionHost): void {\n    const projectedEl = ref.nativeElement;\n    const hostEl = host.ref.nativeElement;\n    const childNodes = projectedEl.childNodes;\n    let child = childNodes[0];\n\n    // We hoist all of the projected element's children out into the projected elements position\n    // because we *only* want to move the projected element and not its children.\n    _replaceWith(projectedEl, child);\n    let l = childNodes.length;\n    while (l--) {\n      child.parentNode.insertBefore(childNodes[0], child.nextSibling);\n      child = child.nextSibling;  // nextSibling is now the childNodes[0].\n    }\n\n    // Insert all host children under the projectedEl, then replace host by component.\n    l = hostEl.childNodes.length;\n    while (l--) {\n      projectedEl.appendChild(hostEl.childNodes[0]);\n    }\n    _replaceWith(hostEl, projectedEl);\n\n    // At this point the host is replaced by the component. Nothing else to be done.\n  }\n}\n\n\n@NgModule({\n  exports: [DomProjectionHost],\n  declarations: [DomProjectionHost],\n})\nexport class ProjectionModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ProjectionModule,\n      providers: [DomProjection]\n    };\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}