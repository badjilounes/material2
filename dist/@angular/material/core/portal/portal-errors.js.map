{"version":3,"file":"portal-errors.js","sourceRoot":"","sources":["portal-errors.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,yCAAwC;AAExC,0EAA0E;AAC1E;IAAuC,qCAAO;IAC5C;eACI,kBAAM,iCAAiC,CAAC;IAC5C,CAAC;IACH,wBAAC;AAAD,CAAC,AAJD,CAAuC,eAAO,GAI7C;AAJY,8CAAiB;AAM9B,8FAA8F;AAC9F;IAAkD,gDAAO;IACvD;eACI,kBAAM,oCAAoC,CAAC;IAC/C,CAAC;IACH,mCAAC;AAAD,CAAC,AAJD,CAAkD,eAAO,GAIxD;AAJY,oEAA4B;AAMzC,uFAAuF;AACvF;IAAsD,oDAAO;IAC3D;eACI,kBAAM,2CAA2C,CAAC;IACtD,CAAC;IACH,uCAAC;AAAD,CAAC,AAJD,CAAsD,eAAO,GAI5D;AAJY,4EAAgC;AAM7C,yEAAyE;AACzE;IAA8C,4CAAO;IACnD;eACI,kBACE,+CAA+C;YAC/C,sEAAsE,CAAC;IAC7E,CAAC;IACH,+BAAC;AAAD,CAAC,AAND,CAA8C,eAAO,GAMpD;AANY,4DAAwB;AAQrC,0EAA0E;AAC1E;IAA2C,yCAAO;IAChD;eACI,kBAAM,oDAAoD,CAAC;IAC/D,CAAC;IACH,4BAAC;AAAD,CAAC,AAJD,CAA2C,eAAO,GAIjD;AAJY,sDAAqB;AAMlC,gFAAgF;AAChF;IAA6C,2CAAO;IAClD;eACI,kBAAM,8DAA8D,CAAC;IACzE,CAAC;IACH,8BAAC;AAAD,CAAC,AAJD,CAA6C,eAAO,GAInD;AAJY,0DAAuB","sourcesContent":["import {MdError} from '../errors/error';\n\n/** Exception thrown when attempting to attach a null portal to a host. */\nexport class MdNullPortalError extends MdError {\n  constructor() {\n      super('Must provide a portal to attach');\n  }\n}\n\n/** Exception thrown when attempting to attach a portal to a host that is already attached. */\nexport class MdPortalAlreadyAttachedError extends MdError {\n  constructor() {\n      super('Host already has a portal attached');\n  }\n}\n\n/** Exception thrown when attempting to attach a portal to an already-disposed host. */\nexport class MdPortalHostAlreadyDisposedError extends MdError {\n  constructor() {\n      super('This PortalHost has already been disposed');\n  }\n}\n\n/** Exception thrown when attempting to attach an unknown portal type. */\nexport class MdUnknownPortalTypeError extends MdError {\n  constructor() {\n      super(\n        'Attempting to attach an unknown Portal type. ' +\n        'BasePortalHost accepts either a ComponentPortal or a TemplatePortal.');\n  }\n}\n\n/** Exception thrown when attempting to attach a portal to a null host. */\nexport class MdNullPortalHostError extends MdError {\n  constructor() {\n      super('Attempting to attach a portal to a null PortalHost');\n  }\n}\n\n/** Exception thrown when attempting to detach a portal that is not attached. */\nexport class MdNoPortalAttachedError extends MdError {\n  constructor() {\n      super('Attempting to detach a portal that is not attached to a host');\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}