{"version":3,"file":"progress-bar.js","sourceRoot":"","sources":["progress-bar.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAOuB;AACvB,0CAA6C;AAC7C,mEAAuF;AAEvF,yCAAyC;AACzC,kEAAkE;AAGlE;;GAEG;AAYH,IAAa,aAAa;IAX1B;QAYE,6EAA6E;QACrE,WAAM,GAAW,CAAC,CAAC;QAY3B,0DAA0D;QAClD,iBAAY,GAAW,CAAC,CAAC;QAWjC;;;;;;WAMG;QAGH,SAAI,GAAyD,aAAa,CAAC;IAkB7E,CAAC;IA/CC,sBAAI,gCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;aAED,UAAU,CAAS;YACjB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9B,CAAC;;;OAJA;IAUD,sBAAI,sCAAW;aAAf;YACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC3B,CAAC;aAED,UAAgB,CAAS;YACvB,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACpC,CAAC;;;OAJA;IAiBD,iFAAiF;IACjF,yCAAiB,GAAjB;QACE,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;QAC7B,MAAM,CAAC,EAAC,SAAS,EAAE,YAAU,KAAK,MAAG,EAAC,CAAC;IACzC,CAAC;IAED;;;OAGG;IACH,wCAAgB,GAAhB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC;YAC1B,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;YACnC,MAAM,CAAC,EAAC,SAAS,EAAE,YAAU,KAAK,MAAG,EAAC,CAAC;QACzC,CAAC;IACH,CAAC;IACH,oBAAC;AAAD,CAAC,AArDD,IAqDC;AA/CC;IAFC,YAAK,EAAE;IACP,kBAAW,CAAC,oBAAoB,CAAC;;;0CAGjC;AAUD;IADC,YAAK,EAAE;;;gDAGP;AAeD;IAFC,YAAK,EAAE;IACP,kBAAW,CAAC,WAAW,CAAC;;2CACkD;AAnChE,aAAa;IAXzB,gBAAS,CAAC;QACT,QAAQ,EAAE,mCAAmC;QAC7C,IAAI,EAAE;YACJ,MAAM,EAAE,aAAa;YACrB,eAAe,EAAE,GAAG;YACpB,eAAe,EAAE,KAAK;SACvB;QACD,QAAQ,EAAE,OAAO,CAAC,qBAAqB,CAAC;QACxC,MAAM,EAAE,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,QAAQ,EAAE,CAAC;QAClD,eAAe,EAAE,8BAAuB,CAAC,MAAM;KAChD,CAAC;GACW,aAAa,CAqDzB;AArDY,sCAAa;AAuD1B,sEAAsE;AACtE,eAAe,CAAS,EAAE,GAAO,EAAE,GAAS;IAAlB,oBAAA,EAAA,OAAO;IAAE,oBAAA,EAAA,SAAS;IAC1C,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;AACzC,CAAC;AAQD,IAAa,mBAAmB;IAAhC;IAOA,CAAC;IANQ,2BAAO,GAAd;QACE,MAAM,CAAC;YACL,QAAQ,EAAE,qBAAmB;YAC7B,SAAS,EAAE,EAAE;SACd,CAAC;IACJ,CAAC;IACH,0BAAC;AAAD,CAAC,AAPD,IAOC;AAPY,mBAAmB;IAL/B,eAAQ,CAAC;QACR,OAAO,EAAE,CAAC,qBAAY,EAAE,kDAAmC,CAAC;QAC5D,OAAO,EAAE,CAAC,aAAa,EAAE,kDAAmC,CAAC;QAC7D,YAAY,EAAE,CAAC,aAAa,CAAC;KAC9B,CAAC;GACW,mBAAmB,CAO/B;AAPY,kDAAmB","sourcesContent":["import {\n    NgModule,\n    ModuleWithProviders,\n    Component,\n    ChangeDetectionStrategy,\n    HostBinding,\n    Input,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {DefaultStyleCompatibilityModeModule} from '../core/compatibility/default-mode';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progressbar \"for\".\n\n\n/**\n * <md-progress-bar> component.\n */\n@Component({\n  selector: 'md-progress-bar, mat-progress-bar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n  },\n  template: require('./progress-bar.html'),\n  styles: [require('./progress-bar.css').toString()],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MdProgressBar {\n  /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */\n  private _value: number = 0;\n\n  @Input()\n  @HostBinding('attr.aria-valuenow')\n  get value() {\n    return this._value;\n  }\n\n  set value(v: number) {\n    this._value = clamp(v || 0);\n  }\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  private _bufferValue: number = 0;\n\n  @Input()\n  get bufferValue() {\n    return this._bufferValue;\n  }\n\n  set bufferValue(v: number) {\n    this._bufferValue = clamp(v || 0);\n  }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input()\n  @HostBinding('attr.mode')\n  mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    let scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode == 'buffer') {\n      let scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\n\n@NgModule({\n  imports: [CommonModule, DefaultStyleCompatibilityModeModule],\n  exports: [MdProgressBar, DefaultStyleCompatibilityModeModule],\n  declarations: [MdProgressBar],\n})\nexport class MdProgressBarModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MdProgressBarModule,\n      providers: []\n    };\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}